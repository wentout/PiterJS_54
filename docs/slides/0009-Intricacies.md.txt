
-----

<h1 style={{fontSize:'15vh', color: 'orange'}}>Intricacies</h1>

<h1 className="borderline">2</h1>

-----

# intricacies : Function prototype

```javascript className=codegiantshift

Function.prototype
// or
function.prototype

// OR ???
// ...
```

-----

# intricacies : Function prototype

```javascript className=codegiantshift

Function.prototype
// or
function.prototype

// OR ???
Object.getPrototypeOf(function)

```

-----

# intricacies : Primitives Types or Primitive Values

```javascript className=codehugeshift

// primitive type
const primitiveValue = 5;

// primitive value
const myNumber = new Number(5);
// result is a primitive type
myNumber.valueOf();

// && valueOf or Symbol.toPrimitive ?

```

-----

# intricacies : Primitives Types or Primitive Values

```javascript className=codemediumshift

const vectorObj = new Number(5);
const proxyAsNumber = new Proxy(vectorObj, {
	get (target, prop) {
		if (prop === Symbol.toPrimitive) {
			return function (...args) {
				return vectorObj.valueOf();
			}
		}
		return target.valueOf();
	}
});

```

-----

# intricacies : Primitives Types or Primitive Values

```javascript className=codehugeshift

const a = new Number(100);
a.subtract = function (b) {
	return this.valueOf() - b;
};
console.log(a.subtract(10));	// 90

console.log(a - 10);			// 90
console.log(a - 10); 			// 90
console.log(a - 10); 			// guess

```

-----

# intricacies : Primitives Types or Primitive Values

```javascript className=codehugeshift

const a = new Number(100);
a.subtract = function (b) {
	return this.valueOf() - b;
};
a[Symbol.toPrimitive] = () => {
	throw new Error('418: use subtract !');
}
console.log(a.subtract(10));	// 90
console.log(a - 10);			// Error

```

-----

# intricacies : Primitives Types or Primitive Values

```javascript className=codegiantshift

with ( 0 ) {
	console.log(
		Math.pow(
			valueOf(), valueOf()
		)
	);		// 1
}

```

-----

# However Object's root with example is nice

```javascript className=codegiantshift

with ( Object ) {
	console.log(
		getPrototypeOf(
			create( null )
		)
	);		// null
}

```

-----

# What Proto Emulation Is ?

```javascript className=codemedium

const Base = function () { };
class User extends Base { }

Reflect.setPrototypeOf(Base.prototype, 
	new Proxy(User.prototype, {
		get (target, propName, receiver) {
			return Reflect
				.get( target, propName, receiver ) ||
						undefined;
	}
}));

```


-----

# intricacies : super() is a call !

```javascript className=codemediumshift

class SomeClass {
	constructor() {
		// this keyword is undefined here
		// we are able to see it using debugger;
		debugger;
		// new.target is her, but arguments not
		console.log(0, new.target.name);
		super();
		this; 
	}
}

```